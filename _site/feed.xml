<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Guilherme Cardoso</title>
		<description>My personal website and blog.</description>		
		<link>http://guilhermecardoso.pt</link>
		<atom:link href="http://guilhermecardoso.pt/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Repositório de software</title>
				<description>&lt;p&gt;Nós utilizamos gestor de pacotes como o apt e yum para instalar pacotes sem termos de fazer a instalação manual ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install. &lt;/p&gt;

&lt;p&gt;As distribuições de Linux mantêm repositórios públicos. Nestes repositórios eles disponibilizam software configurado, compilado e pronto para diferentes arquitecturas e versões da distribuição. Raramente encontras um software no repositório oficial do SO, em casos como o mono tens versões usadas há 4 ou 5 anos.&lt;/p&gt;

&lt;p&gt;Agora começa a ser mais comum quem distribui o software disponibilizar um repositório público que podes adicionar e confirar pois são os proprietários do código a disponibilizar os pacotes. &lt;/p&gt;

&lt;p&gt;Mesmo assim ainda são poucas e há muitos softwares que são disponibilizado por outros terceiros que fazem esse trabalho por oferta.&lt;/p&gt;

&lt;h3 id=&quot;chaves&quot;&gt;Chaves&lt;/h3&gt;

&lt;p&gt;Quando adicionamos um novo repositório ao gestor de software vamos permitir que esse distribuidor instale o código que quiser.&lt;/p&gt;

&lt;p&gt;Uma medida de segurança implementada é a troca de chaves pública e privada. Quem pública estes softwares tem de disponibilizar uma chave pública. Essa chave pública é mostrada em mensagens de erro quando tentamos actualizar o Apt e ele tem um repositório sem chave confiada:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;W: GPG error: http://ppa.launchpad.net intrepid Release: The following signatures couldn&#39;t be verified because the public key is not available: NO_PUBKEY C514AF8E4BA401C3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neste exemplo temos de fazer download da chave&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pgpkeys.mit.edu --recv-key C514AF8E4BA401C3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E adicioná-la com apt-key add ficheiro-da-chave.key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg -a --export C514AF8E4BA401C3 | apt-key add -
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Thu, 18 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/ide/software/2014/09/18/linux-software-versoes-chaves.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/ide/software/2014/09/18/linux-software-versoes-chaves.html</guid>
			</item>
		
			<item>
				<title>IDEs - Softwares para programar</title>
				<description>&lt;h3 id=&quot;visual-studio&quot;&gt;Visual Studio&lt;/h3&gt;

&lt;p&gt;Linguagens: VB e C#, C++, F#&lt;/p&gt;

&lt;p&gt;O Visual Studio sempre foi campeão a nível de IDEs, se tiveres um bom pc consegues tirar partido de funcionalidades muito boas. &lt;/p&gt;

&lt;p&gt;O &lt;a href=&quot;http://www.jetbrains.com/resharper/&quot;&gt;Resharper&lt;/a&gt; é um plugin excelente, a caixa de sugestões que apresenta enquanto escreves código (syntax highlighting) não se compara a qualquer outro IDE. A revisão de código é muito boa assim como as opções de refacturar o código. Sem dúvida que ajuda a reduzir o tempo de desenvolvimento. &lt;/p&gt;

&lt;p&gt;Não é gratuíto mas já foi crackado, e o google é amigo.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&quot;https://www.nuget.org/&quot;&gt;Nuget&lt;/a&gt; é o gestor de pacotes usado em .NET. O Visual Studio tem a integração com ele e resolve as dependências de vários projectos. &lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post-entry__image&quot; src=&quot;/media/posts/ides-vs1.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;monodevelop&quot;&gt;MonoDevelop&lt;/h3&gt;

&lt;p&gt;Linguagens: C#&lt;/p&gt;

&lt;p&gt;O MonoDevelop é um IDE complicado. Ele é opensource e é usado em Linux para programar C# a utilizar o mono. Eu utilizo-o porque é mais que suficiente para programar em C#, apesar de não se comparar ao Visual Studio é muito bom e também tem vários plugins que instalados melhoram a experiência de utilizador.&lt;/p&gt;

&lt;p&gt;O problema da existência dele para mim é o seu descendente, o Xamarin Studio. É muito bom, compatível com Windows, Linux e Mac e até o comparo ao Visual Studio em muitas funcionalidades e vantagens mas infelizmente uma desvantagem é o preço dele, daí usar o MonoDevelop.&lt;/p&gt;

&lt;p&gt;Para Linux a Xamarin está a publicar pacotes de instalação oficiais para o mono que agora devemos usar em vez dos desactualizados da distrubuição ou de outras PPAs que não são da Xamarim.&lt;/p&gt;

&lt;p&gt;Para o Monodevelop eles não mantêm pacotes, isto porque lhes interessa o Xamarin. Eu uso a PPA do tpokorra para o Monodevelop. Já usava antes para o mono e normalmente era a mais actualizada e de confiança.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post-entry__image&quot; src=&quot;/media/posts/ides-monodevelop4.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;xamarin-studio&quot;&gt;Xamarin Studio&lt;/h3&gt;

&lt;p&gt;Linguagens: C#&lt;/p&gt;

&lt;p&gt;Já vi muitas opiniões polémicas em relação ao que a Xamarin representa mas a verdade é que tem soluções para desenvolvimento rápido para aplicações mobile por exemplo. O mono continua a ser opensource e é usado em bastantes projectos também graças ao suporte que a Xamarin tem dado ao desenvolvimento do mono. A nível de compatibilidade suporta o C# 5 asincrono mas não é compatível com algumas funcionalidades do mvc e possivelmente outras soluções desenvolvidas por terceiros.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post-entry__image&quot; src=&quot;/media/posts/ides-xamarin5.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;phpstorm&quot;&gt;PHPStorm&lt;/h3&gt;

&lt;p&gt;O IDE que neste momento utilizo para programar em PHP. É da mesma equipa do Resharper para o Visual Studio, daí facilmente me ter adaptado.&lt;/p&gt;

&lt;p&gt;O problema é o consumo de recursos para programar com ele. Num portátil com 4GB de ram e um processador fraco dual core AMD A1 não dá para trabalhar com ele.&lt;/p&gt;

&lt;p&gt;No entanto se tiveres um bom pc é semelhante ao Visual Studio a nível de experiência de utilizador. O facto de não ter soluções e cada projecto ser um programa separado fazia-me impressão a início mas até é melhor desde que o pc aguente.&lt;/p&gt;

&lt;p&gt;Não é gratuíto mas já foi crackado, e o google é amigo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post-entry__image&quot; src=&quot;/media/posts/ides-phpstorm2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;netbeans&quot;&gt;NetBeans&lt;/h3&gt;

&lt;p&gt;É um IDE completo mas para mim inferir ao PHPStorm. A única vantagem que vi-a era abrir vários projectos em simultâneo.&lt;/p&gt;

&lt;p&gt;A integração com o Xdebug é simples, tem suporte a git e também tem bons plugins para melhorar a experiência de utilizador.&lt;/p&gt;

&lt;p&gt;No meu portátil tornou-se demasiado lento porque tinha abertos 4 ou 5 projectos na workspace e já consumia muitos recursos.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post-entry__image&quot; src=&quot;/media/posts/ides-netbeans6.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;geany&quot;&gt;Geany&lt;/h3&gt;

&lt;p&gt;Utilizo o Geany para programar no portátil (é um portátil lento). É mais rápido que o Netbeans.&lt;/p&gt;

&lt;p&gt;O Geany é leve também por não ter demasiadas funcionalidades. O bom é que existem vários plugins que permitem torná-lo mais completo sem perder a qualidade de desempenho. Por exemplo, para fazer-mos debug a código temos de instalar o &lt;a href=&quot;http://plugins.geany.org/debugger.html&quot;&gt;Plugin Debugger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post-entry__image&quot; src=&quot;/media/posts/ides-geanydebugger3.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vim&quot;&gt;Vim&lt;/h3&gt;

&lt;p&gt;O vim tanto pode ser aquele editor de acesso rápido que temos numa shell para editar ficheiros como pode ser usado para programar scripts e fazer debug por exemplo (&lt;a href=&quot;https://www.guilhermecardoso.pt/php/linux/2014/09/15/php-debug-with-vim-vdebug-xdebug.html&quot;&gt;Fazer debug em PHP com Vim, Vdebug e Xdebug&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Quando se trata de sites que tenho de alterar num servidor remoto mas que nem sequer é controlado por git ou subversion eu apenas uso o vim. Havia uma altura que o fazia por FTP para puder alterar num IDE mas bem configurado o vim até cria as tabs com 4 espaços por exemplo, e altera as cores para uma syntax de programação.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post-entry__image&quot; src=&quot;/media/posts/vim_vdebug1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;icecoder&quot;&gt;ICECoder&lt;/h3&gt;

&lt;p&gt;Aqui está uma surpresa interessante! Testei-o e é muito bom para algo desenvolvido em javascript e PHP, com as suas limitações claro.&lt;/p&gt;

&lt;p&gt;É muito recomendado para enviar para servidores remotos e fazer assim alterações do código por um browser mas com cautela, é sempre preferível evitar as vulnerabilidades no servidor de produção.&lt;/p&gt;

&lt;p&gt;Além da password que ele tem eu preferia proteger o directorio com utilizador e password também. Não querendo falar mal do projecto claro, é segurança apenas.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post-entry__image&quot; src=&quot;/media/posts/ides-icecoder7.png&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 17 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/ide/software/2014/09/17/ides.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/ide/software/2014/09/17/ides.html</guid>
			</item>
		
			<item>
				<title>Invadir um site Wordpress - métodos e exemplos</title>
				<description>&lt;h3 id=&quot;verso&quot;&gt;Versão&lt;/h3&gt;

&lt;p&gt;Há vulnerabilidades conhecidas no código principal do Wordpress. Não são muitas mas andam aí e são fáceis de apanhar!&lt;/p&gt;

&lt;p&gt;Para descubrires a versão do wordpress procura a tag &lt;strong&gt;generator&lt;/strong&gt; na página retornada (ver código fonte do browser…).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;generator&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;WordPress 3.9.2&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A maioria das instalações contém o ficheiro readme.html que tem de ser removido depois de instalado o Wordpress. Também podemos ver a versão por aí.&lt;/p&gt;

&lt;p&gt;O próximo passo é saber a versão dos plugins. Podemos fazer um método passivo e fazer pedidos http aos ficheiros do plugin que procuramos, podemos também ver a resposta do http se é 200 para existente ou 404 para não encontrado.&lt;/p&gt;

&lt;p&gt;@todo - vou indicar alguns scripts com base de dados actualizadas que podemos usar para tornar o método aggressivo.&lt;/p&gt;

&lt;p&gt;Daqui iremos usar vulnerabilidades para os plugins encontrados, mas isso mais à frente.&lt;/p&gt;

&lt;h3 id=&quot;utilizadores&quot;&gt;Utilizadores&lt;/h3&gt;

&lt;p&gt;O método que vamos seguir para atacar as contas vai ser brute force. Uma tentativa em massava de autenticação com várias passwords pré defenidas.
O Wordpress permite saber quem é cada utilizador pelo seu id&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://guilhermecardoso.pt/?author=1 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se estiver configurado para URLs amigáveis, o pedido retorna um redireccionamento indicando o nickname no url&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://guilhermecardoso.pt/author/gui
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Além do método de brute force há outras formas de obter as credências.
Se estiveres ligado na mesma rede que alguém que entre no site e tiveres a sorte de não ter nenhum certificado SSL um rastreio do pedido http indica o utilizador e password. Da mesma forma podem ser usados keyloggers mas ou o instalas no mesmo computador que a pessoa que vai aceder ao site, ou dentro da mesma rede usas um exploit para instalar o keylogger (redes públicas com WindowsXP e softwares como o Java e Internet Explorer desactualizados são indicadas).&lt;/p&gt;

&lt;p&gt;De volta aos utilizadores, se te autenticares com um utilizador existente e uma password inválida o Wordpress é nosso amigo e avisa-nos que a conta existe.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/posts/wordpress-hack1.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ferramentas&quot;&gt;Ferramentas&lt;/h3&gt;

&lt;p&gt;As ferramentas e scripts que aqui vou indicar são código aberto e é espetacular encontrá-las no github, só demonstra a verdadeira liberdade do opensource :)&lt;/p&gt;

&lt;h4 id=&quot;httpwpscanorg&quot;&gt;http://wpscan.org/&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Login com brute force&lt;/li&gt;
  &lt;li&gt;Análise de plugins e temas com vulnerabilidades conhecidas&lt;/li&gt;
  &lt;li&gt;Indicar lista de utilizadores&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um pequeno exemplo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby wpscan.rb -u 192.241.xx.x68 --threads 20 --wordlist 500worst.txt --username testadmin

********* SNIP ******************

[+] Starting the password brute forcer

  Brute forcing user &#39;testadmin&#39; with 500 passwords... 100% complete.
[+] Finished at Thu Jul 18 03:39:02 2013
[+] Elapsed time: 00:01:16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Admirado pelas 500 passwords num minuto e 16 segundos? Isto é numa VPS fraca na digital ocean que me custa 3.5 euros mensais. Servidores mais rápidos e infrastruturas maiores permitem-te resultados melhores. Em caso de ips bloqueados ou outras defesas que sejam aplicadas podes recorrer a uma rede: várias máquinas com uma lista curta de passwords a fazerem tentativas aleatórias para não serem bloqueadas por exemplo.&lt;/p&gt;

&lt;h4 id=&quot;nmap&quot;&gt;Nmap&lt;/h4&gt;

&lt;p&gt;Esta ferramenta aparece no Matrix! Ela não serve apenas para procurar portas abertas, diz-nos bastante mais que isso.&lt;/p&gt;

&lt;p&gt;@todo mostrar exemplos de scripts ecs :)&lt;/p&gt;

&lt;h3 id=&quot;vulnerabilidades&quot;&gt;Vulnerabilidades&lt;/h3&gt;

&lt;p&gt;As vulnerabilidades que estas ferramentas e scripts utilizam são erros ou falhas existentes no código. Estes erros e falhas podem permitir:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enviar uma shell para o servidor e aceder a ela (vai efectuar acções no servidor como compressão de directorios e enviar por ftp, descubrir passwords em ficheiros de configuração, etc). Esta vulnerabilidade é comum em anexo de uploads que não validam correctamente o pedido.&lt;/li&gt;
  &lt;li&gt;Injecção de código SQL. URLs do gênero /wp-content/plugins/exemplo/ficheiro.php?id=3534 são usados para injectar código SQL, ou seja, substituir o id por algo que interpretado pela base de dados faça algo que não deveria. Isto ocorre também por má validação&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O problema destas vulnerabilidades é que são demasiado fáceis de ser descoberta por ser código aberto e todos temos acesso, até mesmo plugins pagos recebes o código (apenas tens de usar a licença para usar o plugin no site). O Wordpress tem uma comunidade enorme de programadores, uns melhores que os outros.
Há muitos temas excelentes a nível de design mas fracos na programação e que podem comprometer um servidor inteiro. Empresas que se baseam em “desenvolver” websites (não, CMS não é programar cara!) com CMS deste gênero correm estes riscos e a menos que não conheçam bem o terreno e saibam o que fazem, é comum perderem horas a fazer restauros por causa de plugins infectados.&lt;/p&gt;
</description>
				<pubDate>Tue, 16 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/php/linux/hack/2014/09/16/wordpress-hack-vulnerabilidades.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/php/linux/hack/2014/09/16/wordpress-hack-vulnerabilidades.html</guid>
			</item>
		
			<item>
				<title>Google Hacking Database</title>
				<description>&lt;p&gt;“Utilizar o Google para encontrar técnicos idiotas” - diz tudo. Google dorks são idiotas encontrados através do Google, sites mal configurados com ficheiros públicos que não deveriam ser.&lt;/p&gt;

&lt;p&gt;Como é que os dorks são encontrados através do Google? A seguinte pesquisa:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.google.pt/search?q=filetype:png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Retorna todos os ficheiros do tipo png. Agora vamos passar para um ficheiro mais interessante: &lt;strong&gt;.sql&lt;/strong&gt;. Vamos pesquisar apenas em sites com a extensão .gov&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.google.com/search?q=filetype:sql%20site:gov%20and%20%22insert%20into%22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nesta pesquisa além da extensão do ficheiro ser .sql e a do domínio .gov, também estamos a incluir ficheiros que contenham explicitamente insert into
Este tipo de ficheiros costumam ser cópias de segurança geradas de acesso público que foram encontrados pelos bots da Google&lt;/p&gt;

&lt;p&gt;Algo muito comum neste tipo de pesquisa para script kiddies costuma ser procurar shell já enviados para os servidores. Alguém já explorou o servidor, enviou uma shell e o Google ainda a indexa para nós sabermos onde encontrá-la!&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;exploit-db&lt;/strong&gt; tem um arquivo dedicado a dorks do Google. Podes escolher vários tipos de Dorks como mensagens de erro, ficheiros que contenham passwords, etc. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.exploit-db.com/google-dorks/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;dorks&quot;&gt;Dorks&lt;/h2&gt;

&lt;h3 id=&quot;site&quot;&gt;site&lt;/h3&gt;
&lt;p&gt;Restringe a pesquisa ao domínio especificado. &lt;/p&gt;

&lt;p&gt;Exemplo: site:guilhermecardoso.pt&lt;/p&gt;

&lt;h3 id=&quot;inurl&quot;&gt;inurl&lt;/h3&gt;
&lt;p&gt;Restringue os resultados a links que contenham palavras específicas no URL. &lt;/p&gt;

&lt;p&gt;Exemplo: inurl:wp-admin&lt;/p&gt;

&lt;h3 id=&quot;intitle&quot;&gt;intitle&lt;/h3&gt;
&lt;p&gt;Títulos que contenham palavras específicas.&lt;/p&gt;

&lt;p&gt;Exemplo: intitle:Portugal&lt;/p&gt;

&lt;h3 id=&quot;allintitle&quot;&gt;allintitle&lt;/h3&gt;
&lt;p&gt;Semelhante ao &lt;strong&gt;intitle&lt;/strong&gt; mas corresponde exactamente ao título, enquanto que o intitle procura apenas palavras especificas.&lt;/p&gt;

&lt;p&gt;Exemplo: allintitle:Gui&lt;/p&gt;

&lt;h3 id=&quot;allinurl&quot;&gt;allinurl&lt;/h3&gt;

&lt;h3 id=&quot;cache&quot;&gt;cache&lt;/h3&gt;

&lt;h3 id=&quot;numrange&quot;&gt;numrange&lt;/h3&gt;

&lt;h3 id=&quot;filetype-or-ext&quot;&gt;filetype or ext&lt;/h3&gt;

&lt;h3 id=&quot;link&quot;&gt;link&lt;/h3&gt;

&lt;h3 id=&quot;inanchor&quot;&gt;inanchor&lt;/h3&gt;

&lt;h3 id=&quot;allintext&quot;&gt;allintext&lt;/h3&gt;

&lt;h3 id=&quot;intext&quot;&gt;intext&lt;/h3&gt;

&lt;h3 id=&quot;section&quot;&gt;*&lt;/h3&gt;

&lt;h3 id=&quot;section-1&quot;&gt;**&lt;/h3&gt;

&lt;h3 id=&quot;section-2&quot;&gt;.&lt;/h3&gt;

&lt;h3 id=&quot;section-3&quot;&gt;|&lt;/h3&gt;

&lt;h3 id=&quot;section-4&quot;&gt;+&lt;/h3&gt;

&lt;h3 id=&quot;section-5&quot;&gt;-&lt;/h3&gt;

&lt;h1 id=&quot;exploit-db&quot;&gt;exploit-db&lt;/h1&gt;

&lt;p&gt;A Offensive Security lançou um projecto no exploit-db.com &lt;/p&gt;
</description>
				<pubDate>Tue, 16 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/angularjs/2014/09/16/google-hacking-database.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/angularjs/2014/09/16/google-hacking-database.html</guid>
			</item>
		
			<item>
				<title>Bitcoin</title>
				<description>&lt;p&gt;O Bitcoin é uma moeda virtual que utiliza a rede peer to peer (o mesmo que utilizas quando sacas um torrent). Neste sistema não existe uma autoridade centralizada que controle as transacções, como uma entidade bancária por exemplo.
É utilizado um sistema de banco de dados distribuídos espalhados pelos nós da rede p2p para registar as transacções, e com ciptografia utiliza funções de segurança como aseguir que bitcoins só podem ser usados pelo dono.&lt;/p&gt;

&lt;p&gt;O que significa isto? Ninguém é dono do Bitcoin e caramba, o próprio código fonte é livre!&lt;/p&gt;

&lt;p&gt;No mundo do hacking isto é aquilo que precisas para alugar servidores e outros recursos anonimanente. Tens de passar sempre pelo processo de obter as Bitcoins mas há imensas formas e vários serviços de confiança.&lt;/p&gt;

&lt;p&gt;Apesar de apenas ter um formato digital, uma bitcoin é considerado um activo no sentido económico. Tem valor, valor esse que não pode ser inflacionado da mesma forma que o Euro quando se imprimem mais notas por exemplo.&lt;/p&gt;

&lt;h3 id=&quot;como-usar&quot;&gt;Como usar&lt;/h3&gt;

&lt;p&gt;Ao contrário de uma conta bancária onde a entidade é que tem o dinheiro, com o bitcoin tu armazenas a moeda no teu computador, numa pen drive (cuidado, demasiado casos de acidentes!!) ou até mesmo num serviço de alojamento de bitcoins online.&lt;/p&gt;

&lt;p&gt;Em Portugal já há soluções para comprar bitcoins.&lt;/p&gt;

&lt;h3 id=&quot;como-funciona&quot;&gt;Como funciona&lt;/h3&gt;

&lt;p&gt;No bitcoin, todas as transacções são públicas e armazenadas num banco de dados distrubído, block-chain.&lt;/p&gt;
</description>
				<pubDate>Tue, 16 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/bitcoin/2014/09/16/bitcoin-introducao.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/bitcoin/2014/09/16/bitcoin-introducao.html</guid>
			</item>
		
			<item>
				<title>Ataque brute force</title>
				<description>&lt;p&gt;Um ataque brute-force (ataque de força bruta!) é o ataque mais simples que podemos fazer para descubrir as credenciais de uma conta. &lt;/p&gt;

&lt;p&gt;Ao contrário de exploits que envolvem trabaho de investigação ou outras técnicas mais avançadas, um ataque brute-force apenas envolve a tentativa exaustiva de adivinhar a password. &lt;/p&gt;

&lt;p&gt;Estes ataques podem ser rápidos, demorados ou mesmo barrados pelo servidor.
Infelizmente muitas pessoas não foram ensinadas a escolher uma password e acabam por usar passwords comuns como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;asdasd123123&lt;/li&gt;
  &lt;li&gt;123*123&lt;/li&gt;
  &lt;li&gt;zxcvbnm123&lt;/li&gt;
  &lt;li&gt;mysecretpassword&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estas são as primeiras tentativas, passwords comuns. No caso de um alvo local (um site de Portugal) podemos usar palavras em Português.&lt;/p&gt;

&lt;p&gt;Com uma lista com password pré defenidasf azemos um ataque de dicionários. Usamos várias palavras e podemos usar separadores como &lt;strong&gt;_&lt;/strong&gt; ou &lt;strong&gt;@&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Passwords mais complexas com minúscuas/maiúsculas, caracteres especiais ou palavras sem sentido são mais demoradas de apanhar mas mesmo assim é tudo uma questão de tempo (se não houver resposta de defesa).&lt;/p&gt;

&lt;h3 id=&quot;ataque&quot;&gt;Ataque&lt;/h3&gt;

&lt;p&gt;Para realizar o ataque há vários softwares existentes e até mesmo escrever um script em python ou javascript é simples. Vê os projectos para este fim que estão publicados no github: https://github.com/search?utf8=%E2%9C%93&amp;amp;q=brute+force&lt;/p&gt;

&lt;p&gt;O processo consiste em:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Obter uma password&lt;/li&gt;
  &lt;li&gt;Fazer um pedido de autenticação (normalmente um HTTP POST)&lt;/li&gt;
  &lt;li&gt;Ler a resposta &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para conhecer-mos a resposta que deveríamos receber numa autenticação com sucesso, podemos criar uma conta nesse sistema e inspecionar o pedido HTTP. Senão houver acesso ao registo, podes usar o código da resposta HTTP (&amp;gt;400 consideras erro), faz várias tentativas e considera como correcta qualquer resposta que não a que recebes nas tentativas erradas (aqui corres o risco de respostas de outros erros).&lt;/p&gt;

&lt;p&gt;Em sistemas já conhecidos como o Wordpress este processo é simplificado.&lt;/p&gt;

&lt;p&gt;Podem ser usados vários servidores virtuais (melhor, computadores infectados) para simularem um cluster na tentativa de autenticação. Uma base de dados em redis onde metamos 30GB em memória e todos os servidores fazem as tentativas com essa base de dados, vai-se removendo à medida que se faz get e não há resposta positiva.&lt;/p&gt;

&lt;p&gt;Um servidor com 32GB de RAM arranjas por 33 euros mensais, e cada vps 2 ou 3 euros mensais. &lt;/p&gt;

&lt;h3 id=&quot;listas&quot;&gt;Listas&lt;/h3&gt;

&lt;p&gt;Passwords brute-force&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.moehre.org/bruteforce.html&lt;/li&gt;
  &lt;li&gt;http://packetstormsecurity.com/Crackers/wordlists/&lt;/li&gt;
  &lt;li&gt;http://trac.kismac-ng.org/wiki/wordlists&lt;/li&gt;
  &lt;li&gt;https://wiki.skullsecurity.org/Passwords&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WPA-PSK
 * http://www.renderlab.net/projects/WPA-tables/&lt;/p&gt;

&lt;h3 id=&quot;gerar-uma-lista&quot;&gt;Gerar uma lista&lt;/h3&gt;

&lt;p&gt;Há palavras e numeros que podemos usar para gerir uma lista. Mesmo que seja uma lista pequena usamos antes de um ataque mais global.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aniversário e de parentes próximos&lt;/li&gt;
  &lt;li&gt;Nome e de parentes próximos&lt;/li&gt;
  &lt;li&gt;Cidade natal&lt;/li&gt;
  &lt;li&gt;Gostos pessoais (motas, mulheres, marijuana, mar, golf, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para gerares esta lista podes usar o Apligen: http://apligen.sourceforge.net/&lt;/p&gt;

&lt;h3 id=&quot;referncias&quot;&gt;Referências&lt;/h3&gt;

&lt;p&gt;Artigos interessantes para dar seguimento ao que escrevi&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.troyhunt.com/2011/07/science-of-password-selection.html&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 16 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/hack/2014/09/16/ataque-brute-force.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/hack/2014/09/16/ataque-brute-force.html</guid>
			</item>
		
			<item>
				<title>Actualizações do Sistema Operativo e Softwares</title>
				<description>&lt;p&gt;Já estou habituado a usar pc’s que logo no arranque mostram avisos de actualizações e os proprietários simplesmente me dizem “Ah ignora isso, se puderes remove essas mensagens. Não quero actualizar nada, é sempre a mesma coisa”. Partilhas da mesma opinião? Isto é para ti.&lt;/p&gt;

&lt;p&gt;Quando é encontrada uma vulnerabilidade num software o investigador pode comunicar directamente os donos do código ou simplesmente libertar a falha para outros. Estas vulnerabilidades existem em sistemas operativos, softwares, sites, enfim praticamente tudo que tenha código.&lt;/p&gt;

&lt;p&gt;Ao ser lançada uma actualização para determinado software ela pode cair na categoria da &lt;strong&gt;correcção de falhas de segurança&lt;/strong&gt;, foram falhas corrigidas pelos proprietários e enviado um patch para a corrigir. Ao rejeitares uma actualização destas simplesmente estás a dizer “Ok, descubriram erros e estão a querer actualizar o código do meu computador mas sou preguiço e não quero”. Simples!&lt;/p&gt;

&lt;p&gt;As vulnerabilidades publicas sem nenhum patch disponível para correcção são consideradas Zero Day, Zero Day Attack, Zero Day Exploit. Assim que é libertada uma actualização deixa de ser Zero Day.&lt;/p&gt;

&lt;p&gt;Tenho encontrado computadores com versões ancestrais do Internet Explorer e Flash que até nem se actualizam por causa de permissões de contas, firewall a bloquear portas, etc. Isto sim, é um prato bem servido a quem tem más intenções&lt;/p&gt;
</description>
				<pubDate>Tue, 16 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/security/2014/09/16/actualizacoes-e-vulnerabilidades.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/security/2014/09/16/actualizacoes-e-vulnerabilidades.html</guid>
			</item>
		
			<item>
				<title>Herdar controllers no AngularJS</title>
				<description>&lt;p&gt;Tenho usado directivas como o angular-wizard para fazer uma página com etapas. É muito semelhante a usar páginas parciais com o ui-router, tens um controller principal e os herdeiros herdam a $scope&lt;/p&gt;

&lt;p&gt;Precisei de ter um controller base e herdar para outros dois mas a extender a função. Para isso usamos o .extend nativo do AngularJS.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bibleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;svc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bibleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;KING-JAMES&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; 
		&lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kidsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bibleController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bibleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recommended&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;chapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;verse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;16&amp;#39;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextRecommended&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recommended&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;svc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getNextRecommended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// inherited from baseController&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adultsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bibleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bibleController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bibleService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dailyStudy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;studyId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;264&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;votes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2222&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextDailyStudy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;svc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextDailyStudy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Eu utilizei isto num contexto em que o baseController já era em si um controller herdado mas a utilizar o ui-router. 
Desta forma registas o kidsController e adultsController como dois controladores independentes um do outro, mas com as mesmas dependências.&lt;/p&gt;
</description>
				<pubDate>Tue, 16 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/javascript/2014/09/16/AngularJS-herdar-controller.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/javascript/2014/09/16/AngularJS-herdar-controller.html</guid>
			</item>
		
			<item>
				<title>Fazer debug em PHP com Vim, Vdebug e Xdebug</title>
				<description>&lt;p&gt;Utilizar apenas a linha de comandos para evaluar uma expressão enquanto fazemos debug numa ligação SSH?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/posts/vim_vdebug1.jpg&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Neste artigo vou explicar como fazê-lo.&lt;/p&gt;

&lt;h3 id=&quot;xdebug&quot;&gt;Xdebug&lt;/h3&gt;
&lt;p&gt;O Xdebug é um debugger opensource muito utilizado, se programas em PHP possivelmente já está instalado no pc de desenvolvimento.
IDE’s como o PHPStorm ou NetBens têm grandes funcionalidades de debugging mas vamos alcançar o mesmo com a linha de comandos a usar o vim.&lt;/p&gt;

&lt;h3 id=&quot;vim&quot;&gt;Vim&lt;/h3&gt;

&lt;p&gt;O vim é fantástico! Ao longo de tantos anos continua a ter uma presença muito forte no mundo unix e todo o programador o conhece.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Precisas de confirmar que o vim foi instalado com as flags +signs  e +python, para isso corre
	vim
	:version&lt;/p&gt;

&lt;p&gt;Analisa o registo e caso não tenha instalado segue este tutorial: &lt;/p&gt;

&lt;h3 id=&quot;vdebug&quot;&gt;Vdebug&lt;/h3&gt;
&lt;p&gt;O Vdebug é um plugin para o vim que permite fazer debug a vário código, não apenas PHP!
O mais fácil para instalares o Vdebug é adicioná-lo nas configuração do vim, em ~/.vimrc (cria este arquivo caso não exista)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Plugin &#39;joonty/vdebug&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depois corre este comando para instalares o plugin
	vim +PluginInstall +qall&lt;/p&gt;

&lt;p&gt;Por defeito o Xdebug é configurado na porta 9000 e o Vdebug está à espera disso. Caso corras o Xdebug noutra porta tens de o indicar no ~/.vimrc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:vdebug_options = {}
let g:vdebug_options[&quot;port&quot;] = 9001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A documentação do Vdebug é excelente, basta veres o índice da ajuda e tens uma noção das funcionalidades principais e comandos existentes.
Para veres a documentação
	vim
	:help Vdebug&lt;/p&gt;

&lt;p&gt;Primeiro vais ter de iniciar o debugger para esperar por uma ligação. Esta ligação é activada pela chave passada no XDEBUG_SESSION_START. Esta chave é definida no URL e depois na cookies. O Vdebug aceita qualquer chave aqui, independentemente da que especifiques no ficheiro php.ini do php5-fpm.
Entra no vim (linha de comandos: vim) e carrega no F5. Aparece a mensagem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Waiting for a connection (Ctrl-C to cancel, this message will self-destruct in 20  seconds...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora num browser entra em http://localhost/?XDEBUG_SESSION_START=jesus_loves_you (neste caso a porta 80, se usares outra diferente altera).
Isto vai abrir 4 janelas diferentes. Na esquerda o ficheiro a ser visto e á direita as variáveis locais, variáveis observadas e o output do debugger.&lt;/p&gt;

&lt;p&gt;Os comandos principais são:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;F2 - Próximo&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Mon, 15 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/php/linux/2014/09/15/php-debug-with-vim-vdebug-xdebug.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/php/linux/2014/09/15/php-debug-with-vim-vdebug-xdebug.html</guid>
			</item>
		
			<item>
				<title>Gerir um servidor de alojamento</title>
				<description>&lt;h3 id=&quot;php-e-extenses&quot;&gt;PHP e extensões&lt;/h3&gt;
&lt;p&gt;Praticamente todas as distribuições com instaladores de pacotes conseguem instalar o PHP, MySQL e Apache mas nós precisamos de controlar as versões dos programas e não depender de terceiros para compilar o código.
Eu gosto de compilar o PHP de raíz, assim como o nginx e MySQL. Ainda são muitas as dependências que temos de instalar (muitas de raíz também).&lt;/p&gt;

&lt;p&gt;As extensões também as compilo. O PECL é muito util para instalar extensões e até tem versões recentes, senão te sentires à vontade no unix é sempre uma boa alternativa.&lt;/p&gt;

&lt;p&gt;É útil ter várias instâncias do PHP a correr com versões diferentes. É preciso instalá-lo em versões diferentes mas é útil pois nem todos os projectos suportam a 5.5 com mais funções deprecadas.
O ideal é puxar o código do GIT, fazer checkout da versão desejada e compilar o código do genero ./configure –prefix=/opt/php/5.5 &amp;amp;&amp;amp; make &amp;amp;&amp;amp; install
Assim temos mais constrolo das instalações e até mesmo para as configurações podemos criar uma estrutura semelhante.(php.ini)&lt;/p&gt;

&lt;h3 id=&quot;servios&quot;&gt;Serviços&lt;/h3&gt;

&lt;p&gt;Cpanel e WHM&lt;/p&gt;

&lt;p&gt;O WHM é um serviço pago. Uma solução desenvolvida para configurar uma máquina como servidor web.
É muito comum nas soluções de alojamento disponíveis porque já têem instaladores para CMS como o Wordpress e Jooma, instalam logo o PHPMyadmin para gerir o MySQL, contas FTP, etc.&lt;/p&gt;

&lt;h3 id=&quot;conta&quot;&gt;Conta&lt;/h3&gt;

&lt;p&gt;Quando alugamos um servidor dedicado ou mesmo partilhado, a entidade que o configura costuma entregar ao cliente um utilizador e password desse servidor. Não adicionam este utilizador ao grupo &lt;strong&gt;sudo&lt;/strong&gt; nem muito menos vão dar a conta root e manterem a manutentação, mas instalam os programas e configuram tudo o que é necessário.&lt;/p&gt;

&lt;p&gt;Recomendo os seguintes softwares a serem instalados&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;htop - uma melhoria do &lt;strong&gt;top&lt;/strong&gt; que já vem disponível, permite ver o consumo detalhado de cada processo e o estado geral dos recursos do servidor&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scripts&quot;&gt;Scripts&lt;/h3&gt;

&lt;p&gt;O CPanel e semelhantes trazem opções de backup limitadas. O que mais gosto de fazer é escrever o código e pensar eu na forma como a informação vai ser guardada.&lt;/p&gt;

&lt;p&gt;De 7 em 7 dias um backup completo do conteúdo público de todas as contas (/www), das base de dados e email.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

#START
TIME=`date +&quot;%d-%m-%Y-%H-%M-%S&quot;` # day-month-year-hour-minute-second. Ie: 30-04-2014-14-49-47
FILENAME=&quot;backup-$TIME.tar.gz&quot; # file name is combined with the date
SRCDIR=&quot;/var/www&quot; # source directory
DESDIR=&quot;/var/backups&quot; # destination directory
tar -cpzf $DESDIR/$FILENAME $SRCDIR # compress the source directory and saves the compress archive in destination
#END
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1 vez por dia copiar apenas a base de dados&lt;/p&gt;

</description>
				<pubDate>Mon, 15 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/webhosting/2014/09/15/manage-webhosting.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/webhosting/2014/09/15/manage-webhosting.html</guid>
			</item>
		
			<item>
				<title>Introdução ao padrão BEM em CSS</title>
				<description>&lt;p&gt;Primeiro, porque precisamos de uma metadalogia para CSS sequer? 
Vamos a um exemplo, um widget da última noticia repetido várias vezes na mesma página:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;news&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;main_list&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;highlithed&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;first&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;second&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;News&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Isto é muito comum e normalmente traduz-se numa folha de estilo semelhante a:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.news&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.left.hidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.main_list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.highlighted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Num projecto pequeno onde apenas tu trabalhes no frontend isto não vai gerar confusão, mas se ficar complexo e cada página tiver uma folha de isto corres o risco de usar um .news, .left sem querer e afectar o resto do código. Sabes que o news indica o módulo, o componente principal (utilizador, noticias, etc) mas o restante é apenas atribuir nomes diferentes para não entrarem em colisão. E chega o ponto em que poluíste o contexto e já tens classes em elementos que não querias.&lt;/p&gt;

&lt;p&gt;Se trabalhares com alguém então precisam de ter uma metadologia para seguirem em comum, ou pelo menos um padrão defenido com certa lógica.&lt;/p&gt;

&lt;p&gt;O que mais adoro em código é padrões e arquitecturas e para este caso temos o BEM - Block Element Modifier&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;news&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;news__left&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;news__main_list&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;news__main_list_item--highlithed&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;first&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;news__main_list_item&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;second&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;news__right&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;news__header&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;News&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;news__body&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.news&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news__left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news__left--hiden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news__main_list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news__main_list_item--highlighted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news__header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.news__body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;É mais rápido porque o browser não precisa de lidar com duas classes e bastante mais ligível!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;.news&lt;/strong&gt; O block representa um componente. &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.news__left&lt;/strong&gt; O elemento é o elemento em si que estamos a trabalhar, seja um botão, uma caixa de texto, um texto diferente do resto. O conjunto de elementos formam o componente (apesar de o componente puder usar outros estilos comuns)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.news__main_list_item–hightlighted&lt;/strong&gt; O modificador pode alterar o estado do bloco, neste exemplo do elemento até.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O padrão é usar __ para separar o bloco e elemento e – para representar um estado diferente.&lt;/p&gt;

&lt;p&gt;Cada classe pertence a um elemento e torna tudo muito mais simples. Programadores adoram este tipo de conceitos trazidos para o lado do cliente, torna tudo mais organizado :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/posts/head-marked2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Créditos da imagem: Smashing Magazine&lt;/p&gt;

&lt;p&gt;Uma pequena nota, porque usar a class horrível news__main_list_item–highlithed e não fazer simplesmente .news__main_list li? Gosto de abstrair a folha de estilo o quanto possível do tipo de elemento do DOM. Neste caso é uma lista mas pode ser reaproveitado para outro elemento numa div por exemplo, isto mais a passar paginas de web para mobile.&lt;/p&gt;

&lt;p&gt;Se formos a ver no primeiro exemplo que mostrei, as classes não fazem muito sentido e não encontramos uma ligação entre elas que nos indiquem que pertencem ao mesmo bloco ou grupo. A menos que estivessem juntas na folha de estilo e comentadas, tería dificuldades.&lt;/p&gt;

&lt;p&gt;A seguir o BEM ou outro padrão qualquer com que te identifiques, mesmo que seja muito diferente e pouco convencional, só o facto de seguires um padrão já é muito bom e torna tudo uniformizado, dás nomes seguindo uma lógica.&lt;/p&gt;

&lt;h3 id=&quot;feio&quot;&gt;É feio!&lt;/h3&gt;

&lt;p&gt;Ok é justo, compreendo que á primeira vista .layout-container__right_sidebar–hidden seja grande e feio.
Mas eu em programação no servidor também uso getParentDetailsStatus e recurso-me a usar abreviaturas ou palavras mais curtas só para não ficar feio. Mesmo no PHP que não compilamos o código, é praticamente insigificante para o interpretador e mesmo que seja mais tarde podes minificar tudo. &lt;/p&gt;
</description>
				<pubDate>Mon, 15 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/css/2014/09/15/CSS-BEM-pattern.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/css/2014/09/15/CSS-BEM-pattern.html</guid>
			</item>
		
			<item>
				<title>SMTP local mail server</title>
				<description>&lt;h1 id=&quot;local-mail-server-for-tests&quot;&gt;Local mail server for tests&lt;/h1&gt;

&lt;p&gt;When you’re dealing with emails providers, it’s a good pratice to keep the connection information in a configuration place. Allow it to set the encription, username, etc. Like this&lt;/p&gt;

&lt;p&gt;$array = array(
‘smtp.hostname’ =&amp;gt; ‘localhost’,
‘smtp.port’ =&amp;gt; 25
/*
 * Null for no authenticated
 * Availables: ssl, tsl
 */
‘smtp.security’ =&amp;gt; null,
‘smtp.username’ =&amp;gt; ‘’,
‘smtp.password’ =&amp;gt; ‘’
);&lt;/p&gt;

&lt;p&gt;If you’re using some framework you can put the configuration in the IOC (if any), or in the default framework configuration.
For online email providers you’ve greate services like mail chimp or even the windows live and gmail services. 
Howerever you’ll not want to keep testing the emails always with your provider, you may even get considered as spammer.&lt;/p&gt;

&lt;p&gt;For Windows you can install smtp4dev
A greate tool i’ve used for a few time while i work with MS. It tracks the emails and if you’ve any email client it shows up there.&lt;/p&gt;

&lt;p&gt;For linux i recommend the python mail server. It’s a simple server that output the messages in console, you get the plain text of email.
For me it’s usefull because i always like to inspect the entire email (headers, etc).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
python -m smtpd -n -c DebuggingServer localhost:26
&lt;/code&gt;
The default port is 25&lt;/p&gt;

&lt;h3 id=&quot;getting-ready-for-production&quot;&gt;Getting ready for production&lt;/h3&gt;
&lt;p&gt;This is how i strucutre my projects configurations. The default configurations is in a file like &lt;code&gt;default-settings.php&lt;/code&gt;. In my case the default-settings is set from a prent library. Then i’ve the &lt;code&gt;local-settings.php&lt;/code&gt; wich is ignored and never sent to the git repository. This file return a array that’ll replace the default settings.&lt;/p&gt;
</description>
				<pubDate>Wed, 10 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/smtp/test/2014/09/10/smtp-local-server.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/smtp/test/2014/09/10/smtp-local-server.html</guid>
			</item>
		
			<item>
				<title>Expressão de Função Imediatamente-Invocada</title>
				<description>&lt;p&gt;Em inglês o termo é IIFE - Immediately-Invoked Function Expression. Também é conhecido como Self-Invoked anonymous function.&lt;/p&gt;

&lt;h4 id=&quot;introduo&quot;&gt;Introdução&lt;/h4&gt;
&lt;p&gt;Em javascript, quando invocamos uma função criamos um novo contexto de execução. Todas as variáveis e funções que existam dentro deste contexto não podem ser acedidas por contextos paternos.
Isto é útil para termos privacidade dentro desse contexto sem poluir o resto.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function registarVisita() {
    var i = 0;
    return function() {
        console.log(++1);
    };
}

var test = registerVisita();
test(); // log: 1
test(); // log: 2

var test2 = registerVisita();
test2(); // log: 1
test3(); // log: 2

test(); // log 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i; // Erro de Referência - i não está defenido, apenas existe dentro de registarVisita&lt;/p&gt;

&lt;p&gt;As funções test e test2 apenas são executadas quando as invocamos.
Quando defenimos uma função &lt;code&gt;function foo() {}&lt;/code&gt; our &lt;code&gt;var foo = function(){}&lt;/code&gt; temos um identificador para a função, que invocamos usando parêntises à frente
Mesmo que só chamemos a função test uma vez temos de ter a referência para depois invocarmos a função&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var foo = function() { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No entanto, senão passarmos nenhum identificador para a função é lançada uma excepção&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function() { }();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quando o parser encontra a palavra &lt;strong&gt;function&lt;/strong&gt; num scope global ou dentro de uma função, trata-o como uma declaração de função (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function&quot;&gt;Statement&lt;/a&gt;) não como uma expressão de função (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot;&gt;Function&lt;/a&gt;).
Como não está explicito que a função é uma expressão, o parser pensa que é uma declaração de função e espera que a palavra &lt;strong&gt;function&lt;/strong&gt; seja seguida do nome, em vez de (. Isto é porque uma função requer um nome.&lt;/p&gt;

&lt;h4 id=&quot;iife&quot;&gt;IIFE&lt;/h4&gt;
&lt;p&gt;Se colocarmos tudo dentro de parêntises, o parser vai esperar uma expressão de função em vez de uma declaração. Isto é porque em javascript parêntises não podem conter statments.
Quando o parser encontra a palavra &lt;strong&gt;function&lt;/strong&gt;, sabe que tem de o parse como uma expressão e não declaração.
Ambos os exemplos podem ser utilizados para criar-mos a mesma privacidade dos primeiros exemplos dentro do contexto da função&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Recomendação do Crockford (http://www.crockford.com/)
(function() { 
}());

// Também funciona
(function() {

})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como o objectivo dos parênteses é separar as expressões das declarações de funções, eles podem ser omitidos quando o parser já espera uma expressão&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var i = function() { return 1; }(); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No entanto devemos usá-los quando estamos a atribuir, por uma questão de convenção.
Os parêntises também são úteis para quem começa a ler o início da função já saber que ela imediatamente executada.&lt;/p&gt;

&lt;h3 id=&quot;fontes&quot;&gt;Fontes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://benalman.com/news/2010/11/immediately-invoked-function-expression/&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Wed, 10 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/javascript/2014/09/10/javascript-iife.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/javascript/2014/09/10/javascript-iife.html</guid>
			</item>
		
			<item>
				<title>CSS e LESS</title>
				<description>&lt;p&gt;Qualquer folha de estilos que tenhamos, podemos compilar com less e é gerado um resultado igual.
Isto é bom para projectos já existentes, onde podemos começar a fazer implementações a tirar partido do less sem termos de remudelar todo o código já usado.&lt;/p&gt;

&lt;h4 id=&quot;mixins&quot;&gt;Mixins&lt;/h4&gt;

&lt;p&gt;Se precisas de desenvolver aplicações e websites podes criar um conjunto de funções que partilhes nos projectos. Um pacote bower ou um simples ficheiro .css&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Código compatível - Aqui é que tiramos realmente proveito! Para aplicar uma sombra, em vez de escrever-mos .shadow, .webkit-shadow, etc criamos um método que o faça, receba variáveis para tamanhos e cores&lt;/li&gt;
  &lt;li&gt;Grelha - Eu gosto de esquematizar o design em grelhas. Não obrigo a seguir sempre este padrão mas para os containers e elementos principais do layout aplico (cabecários, barras laterais, etc).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;grelha-do-bootstrap&quot;&gt;Grelha do Bootstrap&lt;/h4&gt;
&lt;p&gt;Eu não gosto de definir os tamanhos dos elementos no html. Acho uma má prática.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Numa aplicação grande em que uses sempre o mesmos tamanho para os formulários (ex: col-xs-7), quando fores alterar o tamanho vais fazê-lo em todas as páginas.&lt;/li&gt;
  &lt;li&gt;Simplesmente não me parece bem. Prefiro defenir isto em css e não usar classes &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Com less, podemos fazê-lo a usar as mixins do Bootstrap. Por exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;ex-container&quot;&amp;gt;
    &amp;lt;div class=&quot;sidebar&quot;&amp;gt;

    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;content&quot;&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

.ex-container {
    .container; /* não chamamos um método mas aplicamos a class ``container`` neste elemento */

    .sidebar {
        .make-xs-col(3);
    }
    .content {
        .make-xs-col(9);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É aqui que o less é pior que sass. &lt;strong&gt;links&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;cores&quot;&gt;Cores&lt;/h3&gt;

&lt;p&gt;O Bootstrap é um excelente exemplo para definir-mos as variáveis das cores.
Usar variáveis como marca, marca-invertida, etc permite-nos aplicar as mesmas cores em vários componentes a seguir um padrão de UX.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@cor-preto-escuro: #666666;
@cor-marca: #EEEEEE;
@cor-marca-invertida: #DDDDDD;

@texto-cor: @cor-preto-escuro;

body {
    color: @texto-cor;
}
.component_noticias {
    .cabecario {
        background-color: @cor-marca;
        color: @cor-marca-invertida;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Wed, 10 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/less/2014/09/10/css-and-less-introduction.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/less/2014/09/10/css-and-less-introduction.html</guid>
			</item>
		
			<item>
				<title>AngularJS - Introdução</title>
				<description>&lt;h1 id=&quot;criar-uma-aplicao-web-e-mobile-com-angularjs&quot;&gt;Criar uma aplicação web e mobile com angularjs&lt;/h1&gt;
&lt;p&gt;Cada módulo é configurado com o método &lt;strong&gt;config&lt;/strong&gt;. Nesta fase não temos acesso a $rootScope porque ainda não foi criada.&lt;/p&gt;

&lt;p&gt;Nesta fase o próprio url não foi traduzido para um controller sequer. É ideal para carregar depêndencias também.
O método &lt;strong&gt;run&lt;/strong&gt; inicia a aplicação e já tem acesso à $rootScope. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    angular.
        module(&#39;biblia&#39;).
        config([function(){
        }].
        run([&#39;$rootScope&#39;, &#39;$http&#39;, function($rootScope, $http) {
            $rootScope
        });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;services-e-factories&quot;&gt;Services e factories&lt;/h4&gt;
&lt;p&gt;Um service retorna sempre uma nova instância fazendo uso de &lt;strong&gt;new&lt;/strong&gt;. 
Uma factory age como um singleton, uma instância única que é partilhada&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    angular.module(&#39;biblia&#39;).service(&#39;bibliaSvc&#39;, [&#39;$rootScope&#39;, &#39;$http&#39;, function($rootScope, $http) {
            var books = [&#39;genesis&#39;, &#39;exodo&#39;];
            return {
                getVersions: function(){

                },
                find: function(version, phrase) {

                },
                getChapter: function(version, book, chapter) {

                },
                getVerse: function(version, book, chapter, verse) {

                },
                findVerses: function(version, book, chapter, verseFrom, verseTo) {
                    $http.get(&#39;/bible-online.com/query?book=&#39; + book + &#39;&amp;amp;chapter=&#39; + chapter + &#39;&amp;amp;from=&#39; + verseFrom + &#39;&amp;amp;verseTo=&#39; + verseTo)
                        .result.then(function(res) {

                        }, function(res) {

                        });
                }
            };

        }).
        controller(&#39;homeCtrl&#39;, [&#39;bibleSvc&#39;, &#39;$scope&#39;, function(bibleSvc, $scope) {
            $scope.find = function() {
                bibleSvc.findVerses($scope.version, $scope.book, $sc)
            };
        });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta é a estrutura que adopto em projectos maiores, em que eu sei que vou usar várias views parciais e até os controladores têm sempre um service associado.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;app
    &lt;ul&gt;
      &lt;li&gt;biblia
        &lt;ul&gt;
          &lt;li&gt;pesquisar.html&lt;/li&gt;
          &lt;li&gt;pesquisar.js&lt;/li&gt;
          &lt;li&gt;pesquisar-livros.html&lt;/li&gt;
          &lt;li&gt;editar.html&lt;/li&gt;
          &lt;li&gt;editar.js&lt;/li&gt;
          &lt;li&gt;service.js&lt;/li&gt;
          &lt;li&gt;module.js&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;inicio
        &lt;ul&gt;
          &lt;li&gt;inicio.html&lt;/li&gt;
          &lt;li&gt;inicio.js&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;contacto
        &lt;ul&gt;
          &lt;li&gt;contacto.html&lt;/li&gt;
          &lt;li&gt;contacto.js&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;comuns
        &lt;ul&gt;
          &lt;li&gt;publicidade
            &lt;ul&gt;
              &lt;li&gt;normal.html&lt;/li&gt;
              &lt;li&gt;normal.js&lt;/li&gt;
              &lt;li&gt;service.js&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;module&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;tests&lt;/li&gt;
  &lt;li&gt;bower_components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu divido em módulos quando se trata de uma entidade do dominio da aplicação. Por exemplo num blog, teria o modulo &lt;strong&gt;blog&lt;/strong&gt;, &lt;strong&gt;blog.artigo&lt;/strong&gt; e &lt;strong&gt;blog.tutorial&lt;/strong&gt;.
Quando crio um novo módulo para componentes deste gênero faço os roteamentos, configurações dos serviços, dentro do &lt;strong&gt;config&lt;/strong&gt; de cada módulo. Ajuda também a manter o código&lt;/p&gt;

&lt;h3 id=&quot;controller&quot;&gt;Controller&lt;/h3&gt;

&lt;p&gt;Por vezes dou por mim a validar dados e lógica num controller, ou até mesmo a utilizar terceiros recursos como consumir apis.
Há código que lida directamente com os objectos na $scope como uma função que ordene uma lista ou que actualize dados na view. Se usarmos uma factory, como se trata de uma instância os controllers podem usar a factory e partilharem a mesma instância.&lt;/p&gt;

&lt;h3 id=&quot;brodcasting-and-emit&quot;&gt;Brodcasting and Emit&lt;/h3&gt;
&lt;p&gt;Tanto o &lt;strong&gt;$broadcast&lt;/strong&gt; como o &lt;strong&gt;$emit&lt;/strong&gt; implementam uma arquitectura de eventos, a diferença está na direcção da propagação no esquema do angular.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$brodcast - Emite um evento a todos os descendentes. No caso de $rootScope.$broadcast propaga todos os pontos que acessadam ao $rootScope como o controllers e directives.&lt;/li&gt;
  &lt;li&gt;$emit - Emite um evento a todos os parentes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exemplo
A nossa aplicação vai ligar-se por uma websocket a um servidor. Esse servidor vai publicar novas notícias.
A aplicação mostra as notícias no controller noticiaCtrl e a directive ultimaNoticia mostra a noticia mais recentes.
Quando o servidor publicar uma nova notícia, a nossa aplicação vai receber esse evento e propagar no evento publicar. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular.module(&#39;biblia&#39;).run([&#39;websocket&#39;, function(websocket) {
    websock.onMessage(function(res) {

    });
}]);

angular.module(&#39;biblia&#39;).controller(&#39;noticiasCtrl&#39;, [&#39;$scope&#39;, &#39;$rootScope&#39;, function(res) {
    $scope.$on(&#39;publicar&#39;, function(res) {
        $scope.$apply(function() {
            $scope.noticias.push(res.noticia);
        });
    });
}]);

angular.module(&#39;biblia&#39;).directive(&#39;ultimaNoticia&#39;, [function() {
    return {
        link: function(attr, elem, scope) {
            scope.$on(&#39;publicar&#39;, function(res) {
                scope.nome = res.noticia.nome;
                scope.imagemUrl = res.noticia.imagemUrl;
                scope.uri = res.noticia.uri;
            });
        }
    };
}]);
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Wed, 10 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/angularjs/2014/09/10/angularjs-introduction.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/angularjs/2014/09/10/angularjs-introduction.html</guid>
			</item>
		
			<item>
				<title>AngularJS and dynamic forms</title>
				<description>&lt;p&gt;There’re situations where i have to do things dynamically in angular.&lt;/p&gt;

&lt;p&gt;I’ll show a simple example. We’ve a contact form, billing form and delivery form. Both forms have common fields. I want to copy the common data from contact to others forms&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Contact&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;novalidate&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;contact.name&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Nick Name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;contact.nickName&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Address&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;contact.address&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;copyContactForm()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Copy to others forms&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Delivery&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;novalidate&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;delivery.name&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Address&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;delivery.address&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Billing&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;novalidate&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;billing.name&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Address&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;billing.address&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contact&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secForms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;billing&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;delivery&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;copyContactForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Loop through contact object properties&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Loop through secondary forms&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secForms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// acess the secondary form, property. Assign the original value from primForm property&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
				<pubDate>Wed, 10 Sep 2014 00:00:00 +0100</pubDate>
				<link>http://guilhermecardoso.pt/angularjs/2014/09/10/angularjs-dynamic-forms.html</link>
				<guid isPermaLink="true">http://guilhermecardoso.pt/angularjs/2014/09/10/angularjs-dynamic-forms.html</guid>
			</item>
		
	</channel>
</rss>